Check Log\input texinfo   @c -*-texinfo-*-
@c %**start of header
@ifnottex
@documentlanguage ja_JP
@end ifnottex
@setfilename autotest_mk.info
@documentencoding UTF-8
@settitle Autotest.mk - GNU Makeを利用したテスト自動化ツール
@firstparagraphindent none
@paragraphindent 1
@c %**end of header

@copying
Copyright @copyright{} 2010 j8takagi
@end copying

@exampleindent 2

@dircategory Basics
@direntry
* Autotest.mk: (autotest_mk).
@end direntry

@titlepage
@title Autotest.mk
@subtitle GNU Makeを利用したテスト自動化ツール
@author j8takagi
@insertcopying
@end titlepage

@ifnottex
@node Top, About, (dir), (dir)
@end ifnottex

@menu
* About::                       Autotest.mkの概要
* Install::                     Autotest.mkのインストール
* Tutorial::                    Autotest.mkチュートリアル
* Manual::                      Autotest.mkマニュアル

@detailmenu
 --- The Detailed Node Listing ---

Autotest.mkのインストール

* Download::                    ダウンロード
* Verify::                      Autotest.mkファイルの検証
* Expand::                      ファイルの展開

Autotest.mkチュートリアル

* Prepare::                     準備
* Create Group::                グループディレクトリーの作成
* Create Test::                 テストディレクトリーの作成
* Edit desc::                   テスト説明ファイルの作成
* Edit cmd::                    テストコマンドファイルの作成
* Test Setting::                テスト想定ファイルの作成
* Test Execute::                テストの実行
* Check Test Log::              テストログファイルの確認
* Group Execute::               テストグループの実行
* Check Group Log::             テストグループログファイルの確認

Autotest.mkマニュアル

* Template Dir::                テンプレートディレクトリー
* Group Dir::                   グループディレクトリー
* Test Dir::                    テストディレクトリー

テンプレートディレクトリー

* make group::                  @kbd{make}または@kbd{make group} - グループの作成
* Template Files::              テンプレートのファイル

グループディレクトリー

* make create::                 @kbd{make create} - テストの作成
* Rename::                      テスト名の変更
* Delete::                      テストの削除
* make check at group::         @kbd{make}または@kbd{make check} - グループ内にあるすべてのテストの実行
* make checkall::               @kbd{make checkall} - グループ内にあるすべてのテストの実行、計時
* make clean at group::         @kbd{make clean} - グループ内にあるすべてのテストで、実行結果をクリア
* make time at group::          @kbd{make time} - グループ内にあるすべてのテストを計時
* make cleantime at group::     @kbd{make cleantime} - グループ内にあるすべてのテストで、計時結果をクリア
* Group Files::                 グループのファイル

テストディレクトリー

* make set::                    @kbd{make set} - テスト想定の作成
* make reset::                  @kbd{make set} - テスト想定の再作成
* make check at test::          @kbd{make}または@kbd{make check} - テストの実行
* make time at test::           @kbd{make time} - テストの計時
* make cleantime at test::      @kbd{make cleantime} - テスト計時結果のクリア
* make clean at test::          @kbd{make cleantime} - テスト結果のクリア
* make cleanall at test::       @kbd{make cleanall} - テストの想定と結果をクリア
* Test Files::                  テストのファイル

@end detailmenu
@end menu

@contents

@node About, Install, Top, Top
@chapter Autotest.mkの概要

Autotest.mkは、GNU Makeを利用したテスト自動化ツールです。何回か@kbd{make}コマンドを実行し、コマンドファイルとテスト結果の想定をあらわすファイルを作成すれば、テストの準備は完了です。あとは@kbd{make}コマンドを1回実行すれば、テストを実行できます。テストが実行されると、詳細なログが出力されます。

Autotest.mkでは、次の3つの概念を使います。

@table @option
@item テンプレート
テストグループとテストのテンプレートです。

@item テストグループ
複数のテストを含むグループです。

@item テスト
テスト個々の内容と結果を表します。
@end table

@unnumberedsec 要件
Autotest.mkは、LinuxやMac OS Xなどで動作します。現在動作を確認しているのは、次のディストリビューションです。

@itemize @bullet

@item
Ubuntu Linux 10.10

@item
Mac OS X バージョン 10.6.5
@end itemize

Mac OS Xでは、@uref{http://www.gnu.org/software/findutils/, GNU Findutils}をインストールしてください。

@node Install, Tutorial, About, Top
@chapter Autotest.mkのインストール

@menu
* Download::                    ダウンロード
* Verify::                      Autotest.mkファイルの検証
* Expand::                      ファイルの展開
@end menu

Autotest.mkをインストールするには、次の作業をします。


@enumerate
@item
Autotest.mkファイルのダウンロード

@item
Autotest.mkファイルの展開
@end enumerate

@node Download, Verify, Install, Install
@section Autotest.mkファイルのダウンロード

次の場所から最新版の@file{tar.gz}ファイルをダウンロードします。

@itemize
@item
@uref{autotest_mk.tar.gz} - Autotest.mkのファイル一式を@file{tar.gz}形式で圧縮したもの

@item
@uref{autotest_mk.tar.gz.md5sum} - @file{autotest_mk.tar.gz}のMD5ハッシュ値
@end itemize

または、@uref{http://github.com/j8takagi/Autotest.mk/downloads/, githubのダウンロードページ}からダウンロードします。

@node Verify, Expand, Download, Install
@section Autotest.mkファイルの検証

ダウンロードが完了したら、@kbd{md5sum}と@kbd{diff}で正しくファイルがダウンロードができているかを検証します。

@example
$ @kbd{openssl md5sum autotest_mk.tar.gz | diff -s autotest_mk.tar.gz.md5sum -}
Files autotest_mk.tar.gz.md5sum and - are identical
@end example

@node Expand, , Verify, Install
@section ファイルの展開

@file{autotest_mk}ファイルをダウンロードしたら、展開先のディレクトリーに移動してから、展開します。
次のコマンドでは、現在ログインしているユーザーのホームディレクトリーに展開します。

@example
$ @kbd{cd ~}
$ @kbd{tar xvzf autotest_mk.tar.gz}
@end example

展開したら、Autotest.mkは使えるようになります。多くのプログラムをインストールするときに必要なコンパイルやビルド、システムディレクトリーへのインストール（@kbd{./configure}や@kbd{make}、@kbd{make install}）は必要ありません。

@node Tutorial, Manual, Install, Top
@chapter Autotest.mkチュートリアル

Autotest.mkを使ったテストの手順は、次のとおりです。

@enumerate
@item
グループディレクトリーの作成

@item
テストディレクトリーの作成

@item
テスト説明ファイルの作成

@item
テストコマンドファイルの作成

@item
テスト想定ファイルの作成

@item
テストの実行

@item
テストログファイルの確認

@item
テストグループの実行

@item
テストグループログファイルの確認
@end enumerate

ここでは、Glenford J Myers『ソフトウェア・テストの技法』（近代科学社、1980）の記載を元にした、次の仕様の三角形判定プログラムをテストする手順を取り上げます@footnote{『ソフトウェア・テストの技法』では「カードから3つの整数を読む」となっているのを、「3つの引数をとる」に変更しています。}。

@quotation
プログラムtriangleは、整数をあらわす3つの引数をとる。この3つの値は、それぞれ三角形の3辺の長さをあらわすものとする。プログラムは、三角形が不等辺三角形の場合は`scalene triangle'、二等辺三角形の場合は`isosceles triangle'、正三角形の場合は`equilateral triangle'を印字する。
@end quotation

この三角形判定プログラムの動作を検証するには、次のテスト・ケースが必要です@footnote{『ソフトウェア・テストの技法』では下記の13個に加え、「それぞれのテスト・ケースについて、入力の値に対して予想される値をしめしたか」というテスト・ケースが記載されています。このテスト・ケースは、Autotest.mkを実行している場合は自動的に満たされると考えています。}。

@quotation
@enumerate
@item
有効な不等辺三角形をあらわすテスト・ケース

@item
有効な正三角形をあらわすテスト・ケース

@item
有効な二等辺三角形をあらわすテスト・ケース

@item
有効な二等辺三角形で2つの等辺を含む3種類の組合せすべてをためすことができる3つのテストケース

@item
1つの辺がゼロの値をもつテスト・ケース

@item
1つの辺が負の値をしめすテスト・ケース

@item
ゼロより大きい3つの整数をもち、そのうち2つの和がそれ以外の1つと等しいようなテスト・ケース

@item
1辺の長さが他の2辺の長さの和に等しいことを3種類の順列のすべてに対してためすことのできるテスト・ケース

@item
ゼロより大きな3つの整数のうち、2つの数の和がそれ以外の1つの数より小さくなるテストケース

@item
ゼロより大きな3つの整数のうち、2つの数の和がそれ以外の1つの数より小さくなることにおいて、3種類の順列すべてを考慮することのできるテストケース

@item
すべての辺がゼロであるテスト・ケース

@item
整数でない値をもつテスト・ケース

@item
数値の個数が間違っていることをためすテスト・ケース
@end enumerate
@end quotation

三角形判定プログラムは、サンプルとして用意されているものを@ref{Prepare, , 準備}するか、または自作してください。

@menu
* Prepare::                     準備
* Create Group::                グループディレクトリーの作成
* Create Test::                 テストディレクトリーの作成
* Edit desc::                   テスト説明ファイルの作成
* Edit cmd::                    テストコマンドファイルの作成
* Test Setting::                テスト想定ファイルの作成
* Test Execute::                テストの実行
* Check Test Log::              テストログファイルの確認
* Group Execute::               テストグループの実行
* Check Group Log::             テストグループログファイルの確認
@end menu

@node Prepare, Create Group, Tutorial, Tutorial
@unnumberedsec 準備

@unnumberedsubsec 作業用フォルダの作成

まず、Autotest.mkのパッケージに含まれている@file{sample/triangle}以下のファイルを、任意の作業用ディレクトリーにコピーします。ここでは、@file{~/triangle}（@file{~}は、現在ログインしているユーザーのホームディレクトリー）を作業用ディレクトリーにします。また、@file{autotest.mk}は、@file{~}に展開されているものとします。

@example
$ @kbd{cd}
$ @kbd{mkdir triangle}
$ @kbd{cd autotest.mk/sample/triangle}
$ @kbd{cp triangle.c triangle_bug.c Makefile ~/triangle}
@end example

作業用ディレクトリーに移動し、中のファイルを確認します。

@example
$ @kbd{cd ~/triangle}
$ @kbd{ls}
Makefile  triangle.c  triangle_bug.c
@end example

@unnumberedsubsec 三角形判定プログラムのビルド

三角形判定プログラムをビルドします。

@example
$ @kbd{make}
rm -f triangle
gcc -o triangle triangle.c
@end example

テストもかねて、三角形判定プログラムを手動で実行します。

@example
$ @kbd{./triangle 3 4 5}
scalene triangle
$ @kbd{./triangle 4 4 4}
equilateral triangle
$ @kbd{./triangle 2 4 4}
isosceles triangle
@end example

@unnumberedsubsec バグを含む三角形判定プログラムのビルド

バグを含み一部のテストに失敗する三角形判定プログラムをビルドする場合は、次のコマンドを実行します。

@example
$ @kbd{make bug}
rm -f triangle
gcc -o triangle triangle.c
@end example

テストもかねて、三角形判定プログラムを手動で実行します。

@example
$ @kbd{./triangle 3 4 5}
futohen sankakukei
$ @kbd{./triangle 4 4 4}
equilateral triangle
$ @kbd{./triangle 2 4 4}
isosceles triangle
@end example

@kbd{./triangle 3 4 5}で、仕様で`scalene triangle'となるべきところが、`futohen sankakukei'となっています。

@node Create Group, Create Test, Prepare, Tutorial
@section グループディレクトリーの作成

テンプレートディレクトリーで@kbd{make}を実行し、グループディレクトリーを作成します。このとき、テストグループのディレクトリーを変数@code{GROUPDIR}で指定します。ここでは、@kbd{~/triangle/test}をテストグループのディレクトリーにします。

@example
$ @kbd{cd ~/autotest.mk/template}
$ @kbd{make GROUPDIR=~/triangle/test}
@end example

次のコマンドでグループディレクトリーに移動し、その中を確認します。

@example
$ @kbd{cd ~/triangle/test}
$ @kbd{ls}
Define.mk  Define_group.mk  Define_test.mk  Makefile  Test.mk
@end example

@node Create Test, Edit desc, Create Group, Tutorial
@section テストディレクトリーの作成

グループディレクトリーで@kbd{make create}を実行し、テストディレクトリーを作成します。このとき、変数@code{GROUPDIR}でテスト名を指定します。テスト名は、小文字のアルファベットと数字で指定します。ここでは、1つめのテスト・ケースに対応するテストディレクトリーを、@code{01_scalene}という名前で作成します。

@example
$ @kbd{make create TEST=01_scalene}
@end example

次のコマンドでテストディレクトリーに移動し、その中を確認します。

@example
$ @kbd{cd 01_scalene}
$ @kbd{ls}
Makefile
@end example

@node Edit desc, Edit cmd, Create Test, Tutorial
@section テスト説明ファイルの作成
テスト説明ファイル@file{desc.txt}はテストに関する説明をあらわし、テストの結果と一緒にログに出力されます。
@file{desc.txt}をテキストエディターを使って次の内容で作成します。

@example
@kbd{有効な不等辺三角形をあらわすテスト・ケース}
@end example

@node Edit cmd, Test Setting, Edit desc, Tutorial
@section テストコマンドファイルの作成

テストコマンドファイル@file{cmd}は、テストの時に実行されるコマンドをあらわします。
このコマンドにより、標準出力とエラー出力にテストの結果が出力されるようにします。

ここでは、@file{cmd}をテキストエディターを使って次の内容で作成します。

@example
@kbd{../../triangle 3 4 5}
@end example

@node Test Setting, Test Execute, Edit cmd, Tutorial
@section テスト想定ファイルの作成

テスト想定ファイル@file{0.txt}は、テストが正しく実行された場合の結果をあらわします。@file{0.txt}の作成方法は、次の3つがあります。

@itemize
@item
手動で作成

@item
@kbd{make set}

@item
@kbd{make reset}
@end itemize

エラーが発生するテストでは、標準出力想定の下にエラー出力想定を続けます。

@subsection 手動で作成
テスト想定ファイル@file{0.txt}をテキストエディターを使って次の内容で作成します。

@example
@kbd{scalene triangle}
@end example

@subsection @kbd{make set}
@kbd{make set}を実行すると、コマンドファイル@file{cmd}が実行されます。実行結果は@file{0.txt}ファイルに出力され、その内容が表示されます。

@example
$ @kbd{make set}
scalene triangle
@end example

この方法で@file{0.txt}を作成する場合は、作成された内容がテスト想定として本当に正しいかよく検討する必要があります。例えば、バグを含む三角形判定プログラムを準備して@kbd{make set}を実行すると、仕様と異なるテスト想定ファイルが作成され、テストを正しく実行できません。

@example
$ @kbd{make set}
futohen sankakukei
@end example

@file{0.txt}がすでに存在する場合は@kbd{make set}を実行するとエラーになり、@file{0.txt}は更新されません。

@subsection @kbd{make reset}
@file{0.txt}がすでに存在する場合は、@kbd{make reset}で更新できます。

@example
$ @kbd{make reset}
scalene triangle
@end example

@node Test Execute, Check Test Log, Test Setting, Tutorial
@section テストの実行

コマンドファイルとテスト想定を用意したら、@kbd{make}または@kbd{make check}でテストを実行できます。

@example
$ @kbd{ls}
0.txt  Makefile  cmd  desc.txt
$ @kbd{make}
有効な不等辺三角形をあらわすテスト・ケース
01_scalene: Test Success 2011-01-10 10:09:55
Detail in /home/foo/triangle/test/01_scalene/detail.log
@end example

表示される項目は、次のとおりです。
@itemize
@item
<テスト説明ファイル@file{desc.txt}の内容>

@item
<テスト名>: <テスト結果（Test SuccessまたはTest Failure）> <テスト実行日時>

@item
Detail in <テスト詳細ログファイルの絶対パス>
@end itemize


@unnumberedsubsec バグを含む三角形判定プログラムの場合

バグを含む三角形判定プログラムでテストを実行すると、次のように表示されます。

@example
$ @kbd{make}
make: [diff.log] Error 1 (ignored)
有効な不等辺三角形をあらわすテスト・ケース
01_scalene: Test Failure 2011-01-10 20:25:16
Detail in /home/foo/triangle/test/01_scalene/detail.log
@end example

@node Check Test Log, Group Execute, Test Execute, Tutorial
@section テストログファイルの確認

テストを実行して作成されたファイルを確認します。@file{1.txt}、@file{test.log}、@file{detail.log}が作成されています。
@example
$ ls
0.txt  1.txt  Makefile  cmd  desc.txt  detail.log  summary.log
@end example

テストを実行すると作成されるファイルは、次のとおりです。必要に応じてファイルの内容を確認します。

@table @file
@item 1.txt
テスト結果をあらわします。エラー発生時は、標準出力のあとにエラー出力が続きます

@item err.log
エラー発生時に、エラーが出力されます。エラーが発生しない場合は作成されません

@item diff.log
テスト想定ファイル@file{0.txt}とテスト結果ファイル@file{1.txt}の差分をあらわします。想定と結果が同一の場合は、作成されません

@item summary.log
テストの実行結果を表します。テスト実行時に表示される項目です。

@item detail.log
テストの詳細ログを表します。上記の内容がすべて出力されます
@end table

@file{detail.log}は、次のようになります。

@example
== test.log ==
----------------------------------------------------------------------
有効な不等辺三角形をあらわすテスト・ケース
01_scalene: Test Success 2011-01-10 10:09:55
Detail in /home/foo/triangle/test/01_scalene/detail.log
----------------------------------------------------------------------

== cmd ==
----------------------------------------------------------------------
../../triangle 3 4 5
----------------------------------------------------------------------

== 0.txt ==
----------------------------------------------------------------------
scalene triangle
----------------------------------------------------------------------

== 1.txt ==
----------------------------------------------------------------------
scalene triangle
----------------------------------------------------------------------

@end example

@unnumberedsubsec バグを含む三角形判定プログラムの場合

バグを含む三角形判定プログラムを準備してテストを実行した場合、@file{1.txt}、@file{test.log}、@file{detail.log}のほかに、テスト想定とテスト結果が異なるため@kbd{diff.log}が作成されます。

@example
$ @kbd{ls}
0.txt  1.txt  Makefile  cmd  desc.txt  detail.log  diff.log  summary.log
@end example

@file{detail.log}は次のようになります。

@example
== summary.log ==
----------------------------------------------------------------------
有効な不等辺三角形をあらわすテスト・ケース
01_scalene: Test Failure 2011-01-10 20:25:16
Detail in /home/foo/triangle/test/01_scalene/detail.log
----------------------------------------------------------------------

== cmd ==
----------------------------------------------------------------------
../../triangle 3 4 5
----------------------------------------------------------------------

== 0.txt ==
----------------------------------------------------------------------
scalene triangle
----------------------------------------------------------------------

== diff.log ==
----------------------------------------------------------------------
*** 0.txt	Mon Jan 10 20:12:14 2011
--- 1.txt	Mon Jan 10 20:25:16 2011
***************
*** 1 ****
! scalene triangle
--- 1 ----
! futohen sankakukei
----------------------------------------------------------------------

== 1.txt ==
----------------------------------------------------------------------
futohen sankakukei
----------------------------------------------------------------------

@end example

@subsection テストのクリア

@kbd{make clean}を実行すると、テストの結果作成されたファイルがクリアされます。

@example
$ @kbd{make clean}
$ @kbd{ls}
0.txt  Makefile  cmd  desc.txt
@end example


@node Group Execute, Check Group Log, Check Test Log, Tutorial
@section テストグループの実行

2つめ以降のテスト・ケースについても、１つめと同じ手順でテストディレクトリーの作成後、テスト説明ファイルとテストコマンドファイル、テスト想定ファイルを作成します。ここでは、先に作成した@file{01_scalene}も含めて、次のようなテストディレクトリーを作成します。

@itemize
@item
01_scalene

@item
02_equilateral

@item
03_isosceles

@item
04_isosceles_c

@item
05_zero

@item
06_minus

@item
07_line

@item
08_lines

@item
09_less

@item
10_lesses

@item
11_zeroall

@item
12_notint

@item
13_argcnt
@end itemize

こうしたディレクトリーやファイルは、Autotest.mkの@file{sample/triangle/test}以下にあるので、コピーして作成することもできます。

テストグループディレクトリーでは、@kbd{make}または@kbd{make check}で複数のテストをまとめて実行できます。

@example
$ @kbd{cd ~/triangle/test}
$ @kbd{make}
test: 13 / 13 tests passed. Detail in /home/foo/triangle/test/TEST.log
test: All tests are succeded.
@end example

表示されるのは、次の項目です。
@itemize
@item
<テスト名>: <成功テスト数>/<全テスト数> test passed. Detail in <テストグループログファイルの絶対パス>

@item
（すべてのテストに成功した場合）<テスト名>: All tests are succeded.
@end itemize

@unnumberedsubsec バグを含む三角形判定プログラムの場合

バグを含む三角形判定プログラムを準備してテストグループを実行した場合、次のように表示されます。

@example
$ @kbd{cd ~/triangle/test}
$ @kbd{make}
test: 11 / 13 tests passed. Detail in /home/foo/triangle/test/TEST.log
@end example

@node Check Group Log,  , Group Execute, Tutorial
@section テストグループログファイルの確認
テストグループを実行すると作成されるファイルは、次のとおりです。

@table @file
@item <テストグループ名を大文字にした文字列>.log
テストグループに含まれるテストとその実行結果の一覧をあらわします。

@item Summary.log
テストの実行結果を表します。テストグループ実行時に表示される内容です。
@end table

ここではテストグループ名は@file{test}なので、@file{TEST.log}が次の内容で作成されます。

@example
01_scalene/
有効な不等辺三角形をあらわすテスト・ケース
01_scalene: Test Success 2011-01-10 12:14:23
Detail in /home/foo/triangle/test/01_scalene/detail.log

12_notint/
整数でない値をもつテスト・ケース
12_notint: Test Success 2011-01-10 12:14:23
Detail in /home/foo/triangle/test/12_notint/detail.log

03_isosceles/
有効な二等辺三角形をあらわすテスト・ケース
03_isosceles: Test Success 2011-01-10 12:14:23
Detail in /home/foo/triangle/test/03_isosceles/detail.log

02_equilateral/
有効な正三角形をあらわすテスト・ケース
02_equilateral: Test Success 2011-01-10 12:14:23
Detail in /home/foo/triangle/test/02_equilateral/detail.log

05_zero/
1つの辺がゼロの値をもつテスト・ケース
05_zero: Test Success 2011-01-10 12:14:23
Detail in /home/foo/triangle/test/05_zero/detail.log

13_argcnt/
数値の個数が間違っていることをためすテスト・ケース
13_argcnt: Test Success 2011-01-10 12:14:23
Detail in /home/foo/triangle/test/13_argcnt/detail.log

10_lesses/
ゼロより大きな3つの整数のうち、2つの数の和がそれ以外の1つの数より小さくなることにおいて、3種類の順列すべてを考慮することのできるテストケース
10_lesses: Test Success 2011-01-10 12:14:23
Detail in /home/foo/triangle/test/10_lesses/detail.log

07_line/
ゼロより大きい3つの整数をもち、そのうち2つの和がそれ以外の1つと等しいようなテスト・ケース
07_line: Test Success 2011-01-10 12:14:23
Detail in /home/foo/triangle/test/07_line/detail.log

06_minus/
1つの辺が負の値をしめすテスト・ケース
06_minus: Test Success 2011-01-10 12:14:23
Detail in /home/foo/triangle/test/06_minus/detail.log

11_zeroall/
すべての辺がゼロであるテスト・ケース
11_zeroall: Test Success 2011-01-10 12:14:24
Detail in /home/foo/triangle/test/11_zeroall/detail.log

08_lines/
1辺の長さが他の2辺の長さの和に等しいことを3種類の順列のすべてに対してためすことのできるテスト・ケース
08_lines: Test Success 2011-01-10 12:14:24
Detail in /home/foo/triangle/test/08_lines/detail.log

09_less/
ゼロより大きな3つの整数のうち、2つの数の和がそれ以外の1つの数より小さくなるテストケース
09_less: Test Success 2011-01-10 12:14:24
Detail in /home/foo/triangle/test/09_less/detail.log

04_isosceles_c/
有効な二等辺三角形で2つの等辺を含む3種類の組合せすべてをためすことができる3つのテストケース
04_isosceles_c: Test Success 2011-01-10 12:14:24
Detail in /home/foo/triangle/test/04_isosceles_c/detail.log
@end example

テストをまとめて実行した場合も、個別のテストを実行した場合と同様に、テストディレクトリーにテストログが出力されます。特定のテスト結果を詳細に検討する場合は、そのテストのテストディレクトリーを開いてテストログファイルの確認をします。

@unnumberedsubsec バグを含む三角形判定プログラムの場合

バグを含む三角形判定プログラムを準備してテストグループを実行した場合、@file{TEST.log}は次のように表示されます。
@example
01_scalene/
有効な不等辺三角形をあらわすテスト・ケース
01_scalene: Test Failure 2011-01-10 21:45:52
Detail in /home/foo/triangle/test/01_scalene/detail.log

12_notint/
整数でない値をもつテスト・ケース
12_notint: Test Success 2011-01-10 21:45:52
Detail in /home/foo/triangle/test/12_notint/detail.log

03_isosceles/
有効な二等辺三角形をあらわすテスト・ケース
03_isosceles: Test Success 2011-01-10 21:45:52
Detail in /home/foo/triangle/test/03_isosceles/detail.log

02_equilateral/
有効な正三角形をあらわすテスト・ケース
02_equilateral: Test Success 2011-01-10 21:45:53
Detail in /home/foo/triangle/test/02_equilateral/detail.log

05_zero/
1つの辺がゼロの値をもつテスト・ケース
05_zero: Test Failure 2011-01-10 21:45:53
Detail in /home/foo/triangle/test/05_zero/detail.log

13_argcnt/
数値の個数が間違っていることをためすテスト・ケース
13_argcnt: Test Success 2011-01-10 21:45:53
Detail in /home/foo/triangle/test/13_argcnt/detail.log

10_lesses/
ゼロより大きな3つの整数のうち、2つの数の和がそれ以外の1つの数より小さくなることにおいて、3種類の順列すべてを考慮することのできるテストケース
10_lesses: Test Success 2011-01-10 21:45:53
Detail in /home/foo/triangle/test/10_lesses/detail.log

07_line/
ゼロより大きい3つの整数をもち、そのうち2つの和がそれ以外の1つと等しいようなテスト・ケース
07_line: Test Success 2011-01-10 21:45:53
Detail in /home/foo/triangle/test/07_line/detail.log

06_minus/
1つの辺が負の値をしめすテスト・ケース
06_minus: Test Success 2011-01-10 21:45:53
Detail in /home/foo/triangle/test/06_minus/detail.log

11_zeroall/
すべての辺がゼロであるテスト・ケース
11_zeroall: Test Failure 2011-01-10 21:45:53
Detail in /home/foo/triangle/test/11_zeroall/detail.log

08_lines/
1辺の長さが他の2辺の長さの和に等しいことを3種類の順列のすべてに対してためすことのできるテスト・ケース
08_lines: Test Success 2011-01-10 21:45:53
Detail in /home/foo/triangle/test/08_lines/detail.log

09_less/
ゼロより大きな3つの整数のうち、2つの数の和がそれ以外の1つの数より小さくなるテストケース
09_less: Test Success 2011-01-10 21:45:53
Detail in /home/foo/triangle/test/09_less/detail.log

04_isosceles_c/
有効な二等辺三角形で2つの等辺を含む3種類の組合せすべてをためすことができる3つのテストケース
04_isosceles_c: Test Success 2011-01-10 21:45:53
Detail in /home/foo/triangle/test/04_isosceles_c/detail.log

@end example

実際の開発では、こうした結果を元にプログラムの問題点を修正することになるでしょう。

@node Manual,  , Tutorial, Top
@chapter Autotest.mkマニュアル

@menu
* Template Dir::                テンプレートディレクトリー
* Group Dir::                   グループディレクトリー
* Test Dir::                    テストディレクトリー
@end menu

@node Template Dir, Group Dir, Manual, Manual
@section テンプレートディレクトリー

テンプレートディレクトリーは、Autotest.mkをインストールするときに展開により作成された@file{template}ディレクトリーです。このディレクトリーに移動すると次の操作ができます。

@menu
* make group::                  @kbd{make}または@kbd{make group} - グループの作成
* Template Files::              テンプレートのファイル
@end menu

@node make group, Template Files, Template Dir, Template Dir
@subsection @kbd{make}または@kbd{make group} - グループの作成

変数@code{GROUPDIR}で指定されたディレクトリーをテストグループディレクトリーとして作成し、必要なファイルを配置します。

@unnumberedsubsubsec 使用例

グループディレクトリーとして@file{~/triangle/test}を作成します。

@example
$ @kbd{make GROUPDIR=~/triangle/test}
@end example

@node Template Files,  , make group, Template Dir
@subsection テンプレートのファイル

テンプレートディレクトリーには、次のファイルが含まれます。
@table @file
@item Makefile
テンプレートディレクトリーのMakefile

@item Group.mk
グループディレクトリーのMakefile。@kbd{make}または@kbd{make group}で、グループディレクトリーに@file{Makefile}として配置されます。

@item Test.mk
テストディレクトリーから参照されるMakefile。@kbd{make}または@kbd{make group}で、グループディレクトリーに配置されます。

@item Define.mk
テストとテストグループに関する項目を定義したMakefile。@kbd{make}または@kbd{make group}で、グループディレクトリーに配置されます。

@item Define_group.mk
テストグループに関する項目を定義したMakefile。@kbd{make}または@kbd{make group}で、グループディレクトリーに配置されます。

@item Define.mk
テストに関する項目を定義したMakefile。@kbd{make}または@kbd{make group}で、グループディレクトリーに配置されます。
@end table

@node Group Dir, Test Dir, Template Dir, Manual
@section グループディレクトリー

@ref{make group, , グループの作成}後、グループディレクトリーに移動すると次の操作ができます。

@menu
* make create::                 @kbd{make create} - テストの作成
* Rename::                      テスト名の変更
* Delete::                      テストの削除
* make check at group::         @kbd{make}または@kbd{make check} - テストグループの実行
* make checkall::               @kbd{make checkall} - グループ内にあるすべてのテストの実行、計時
* make clean at group::         @kbd{make clean} - グループ内にあるすべてのテストで、実行結果をクリア
* make time at group::          @kbd{make time} - グループ内にあるすべてのテストを計時
* make cleantime at group::     @kbd{make cleantime} - グループ内にあるすべてのテストで、計時結果をクリア
* Group Files::                 グループのファイル
@end menu

@node make create, Rename, Group Dir, Group Dir
@subsection @kbd{make create} - テストの作成

変数@code{TEST}で指定されたディレクトリーをテストディレクトリーとして作成し、必要なファイルを配置します。
テスト名は、小文字のアルファベットと数字で指定します。大文字ではじまる名前を指定した場合、テストディレクトリーとして扱われません。

@unnumberedsubsubsec 使用例

テストディレクトリーを、@code{01_scalene}という名前で作成します。

@example
$ @kbd{make create TEST=01_scalene}
@end example

@node Rename, Delete, make create, Group Dir
@subsection テスト名の変更とコピー

テスト名を変更する場合は、@code{mv}コマンドを使います。また、@code{cp}コマンドを使ってテストをコピーすることもできます。

@unnumberedsubsubsec 使用例

@example
$ @kbd{mv 01_scalene 01}
$ @kbd{cp -r 01 02}
@end example

@node Delete, make check at group, Rename, Group Dir
@subsection テストの削除

テストを削除する場合は、@code{rm}コマンドを使います。

@unnumberedsubsubsec 使用例

@example
$ @kbd{rm -rf 01_scalene}
@end example

@node make check at group, make checkall, Delete, Group Dir
@subsection @kbd{make}または@kbd{make check} - テストグループの実行

@kbd{make}または@kbd{make check}で、グループ内にあるすべての@ref{make check at test, , テストの実行}をし、次の項目を表示します。

@itemize
@item
<テスト名>: <成功テスト数>/<全テスト数> test passed. Detail in <テストグループログファイルの絶対パス>

@item
（すべてのテストに成功した場合）<テスト名>: All tests are succeded.
@end itemize

テストグループを実行すると次のファイルが作成されます。

@table @file
@item <テストグループ名を大文字にした文字列>.log
テストグループに含まれるテストとその実行結果の一覧をあらわします。

@item Summary.log
テスト実行結果の概要を表します。テストグループ実行時に表示される内容です。
@end table

@unnumberedsubsubsec 使用例

@example
$ @kbd{make}
test: 13 / 13 tests passed. Detail in /home/foo/triangle/test/TEST.log
test: All tests are succeded.
@end example

@node make checkall, make clean at group, make check at group, Group Dir
@subsection @kbd{make checkall} - グループ内にあるすべてのテストの実行、計時

@kbd{make checkall}でグループ内にあるすべてのテストを、@ref{make check at test, , 実行}し、@ref{make time at test, , 計時}します。@ref{make check at group, , テストの実行}と同じ項目を表示し、出力されるファイルの種類も同じです。@code{<テストグループ名を大文字にした文字列>.log}には、テストと実行結果に加え、計時結果が一覧として出力されます。

テストの計時と実行は別に行われるため、通常にテストを実行するよりも2倍程度の時間がかかります。

@unnumberedsubsubsec 使用例

@example
$ @kbd{make checkall}
test: 13 / 13 tests passed. Detail in /home/foo/triangle/test/TEST.log
test: All tests are succeded.
@end example

@node make clean at group, make time at group, make checkall, Group Dir
@subsection @kbd{make clean} - グループの実行結果をクリア

@kbd{make clean}で、@kbd{make}、@kbd{make check}、@kbd{make checkall}により作成されたテストグループと各テストのファイルをすべて削除します。

@unnumberedsubsubsec 使用例

@example
$ @kbd{cd ~/triangle/test}
$ @kbd{make clean}
@end example

@node make time at group, make cleantime at group, make clean at group, Group Dir
@subsection @kbd{make time} - グループ内にあるすべてのテストを計時

@kbd{make time}で、グループ内にあるすべてのテストを計時し、その結果が表示されます。計時結果は、@file{<テストグループ名を大文字にした文字列>_time.log}に格納されます。

@unnumberedsubsubsec 使用例

@example
$ @kbd{make time}
01_scalene/
real    0m0.007s

02_equilateral/
real    0m0.007s

03_isosceles/
real    0m0.007s

04_isosceles_c/
real    0m0.013s

05_zero/
real    0m0.010s

06_minus/
real    0m0.007s

07_line/
real    0m0.008s

08_lines/
real    0m0.024s

09_less/
real    0m0.009s

10_lesses/
real    0m0.024s

11_zeroall/
real    0m0.007s

12_notint/
real    0m0.007s

13_argcnt/
real    0m0.012s
@end example

@node make cleantime at group, Group Files, make time at group, Group Dir
@subsection @kbd{make cleantime} - グループの計時結果をクリア

@kbd{make cleatime}で、@kbd{make time}により作成されたテストグループと各テストのファイルをすべて削除します。

@node Group Files,  , make cleantime at group, Group Dir
@subsection グループのファイル

グループディレクトリーには、テストディレクトリーに加えて、次のファイルが含まれます。

@table @file
@item Makefile
グループディレクトリーのMakefile

@item Test.mk
テストディレクトリーから参照されるMakefile

@item Define.mk
テストとテストグループに関する項目を定義したMakefile

@item Define_group.mk
テストグループに関する項目を定義したMakefile

@item Define.mk
テストに関する項目を定義したMakefile

@item <テストグループ名を大文字にした文字列>.log
@ref{make check at group, , @kbd{make}や@kbd{make check}}または@ref{make checkall, , @kbd{make checkall}}を実行したときに作成されます。@kbd{make}や@kbd{make check}の場合は、テストグループに含まれるテストと実行結果の一覧です。@kbd{make checkall}の場合は、テストと実行結果と計時結果の一覧です。

@item  Summary.log
テスト実行結果の概要です。@ref{make check at group, , @kbd{make}や@kbd{make check}}または@ref{make checkall, , @kbd{make checkall}}を実行すると作成され、その内容が表示されます。

@end table

@node Test Dir,  , Group Dir, Manual
@section テストディレクトリー

@menu
* make set::                    @kbd{make set} - テスト想定の作成
* make reset::                  @kbd{make set} - テスト想定の再作成
* make check at test::          @kbd{make}または@kbd{make check} - テストの実行
* make time at test::           @kbd{make time} - テストの計時
* make cleantime at test::      @kbd{make cleantime} - テスト計時結果のクリア
* make clean at test::          @kbd{make cleantime} - テスト結果のクリア
* make cleanall at test::       @kbd{make cleanall} - テストの想定と結果をクリア
* Test Files::                  テストのファイル
@end menu

@node make set, make reset, Test Dir, Test Dir
@subsection @kbd{make set} - テスト想定の作成

@node make reset, make check at test, make set, Test Dir
@subsection @kbd{make set} - テスト想定の再作成

@node make check at test, make time at test, make reset, Test Dir
@subsection @kbd{make}または@kbd{make check} - テストの実行

@node make time at test, make cleantime at test, make check at test, Test Dir
@subsection @kbd{make time} - テストの計時

@node make cleantime at test, make clean at test, make time at test, Test Dir
@subsection @kbd{make cleantime} - テスト計時結果のクリア

@node make clean at test, make cleanall at test, make cleantime at test, Test Dir
@subsection @kbd{make cleantime} - テスト結果のクリア

@node make cleanall at test, Test Files, make clean at test, Test Dir
@subsection @kbd{make cleanall} - テストの想定と結果をクリア

@node Test Files,  , make cleanall at test, Test Dir
@subsection テストのファイル

@bye
